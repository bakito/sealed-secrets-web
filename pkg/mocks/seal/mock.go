// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bakito/sealed-secrets-web/pkg/seal (interfaces: Sealer)
//
// Generated by this command:
//
//	mockgen -destination pkg/mocks/seal/mock.go --package seal github.com/bakito/sealed-secrets-web/pkg/seal Sealer
//

// Package seal is a generated GoMock package.
package seal

import (
	context "context"
	io "io"
	reflect "reflect"

	seal "github.com/bakito/sealed-secrets-web/pkg/seal"
	gomock "go.uber.org/mock/gomock"
)

// MockSealer is a mock of Sealer interface.
type MockSealer struct {
	ctrl     *gomock.Controller
	recorder *MockSealerMockRecorder
	isgomock struct{}
}

// MockSealerMockRecorder is the mock recorder for MockSealer.
type MockSealerMockRecorder struct {
	mock *MockSealer
}

// NewMockSealer creates a new mock instance.
func NewMockSealer(ctrl *gomock.Controller) *MockSealer {
	mock := &MockSealer{ctrl: ctrl}
	mock.recorder = &MockSealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSealer) EXPECT() *MockSealerMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockSealer) Certificate(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certificate", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certificate indicates an expected call of Certificate.
func (mr *MockSealerMockRecorder) Certificate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockSealer)(nil).Certificate), ctx)
}

// Raw mocks base method.
func (m *MockSealer) Raw(data seal.Raw) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockSealerMockRecorder) Raw(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockSealer)(nil).Raw), data)
}

// Seal mocks base method.
func (m *MockSealer) Seal(outputFormat string, secret io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", outputFormat, secret)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal.
func (mr *MockSealerMockRecorder) Seal(outputFormat, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockSealer)(nil).Seal), outputFormat, secret)
}

// Validate mocks base method.
func (m *MockSealer) Validate(ctx context.Context, secret io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSealerMockRecorder) Validate(ctx, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSealer)(nil).Validate), ctx, secret)
}
