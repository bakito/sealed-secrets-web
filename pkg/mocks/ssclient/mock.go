// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bitnami-labs/sealed-secrets/pkg/client/clientset/versioned/typed/sealedsecrets/v1alpha1 (interfaces: BitnamiV1alpha1Interface,SealedSecretInterface)
//
// Generated by this command:
//
//	mockgen -destination pkg/mocks/ssclient/mock.go --package ssclient github.com/bitnami-labs/sealed-secrets/pkg/client/clientset/versioned/typed/sealedsecrets/v1alpha1 BitnamiV1alpha1Interface,SealedSecretInterface
//

// Package ssclient is a generated GoMock package.
package ssclient

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/bitnami-labs/sealed-secrets/pkg/apis/sealedsecrets/v1alpha1"
	v1alpha10 "github.com/bitnami-labs/sealed-secrets/pkg/client/clientset/versioned/typed/sealedsecrets/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockBitnamiV1alpha1Interface is a mock of BitnamiV1alpha1Interface interface.
type MockBitnamiV1alpha1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockBitnamiV1alpha1InterfaceMockRecorder
	isgomock struct{}
}

// MockBitnamiV1alpha1InterfaceMockRecorder is the mock recorder for MockBitnamiV1alpha1Interface.
type MockBitnamiV1alpha1InterfaceMockRecorder struct {
	mock *MockBitnamiV1alpha1Interface
}

// NewMockBitnamiV1alpha1Interface creates a new mock instance.
func NewMockBitnamiV1alpha1Interface(ctrl *gomock.Controller) *MockBitnamiV1alpha1Interface {
	mock := &MockBitnamiV1alpha1Interface{ctrl: ctrl}
	mock.recorder = &MockBitnamiV1alpha1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitnamiV1alpha1Interface) EXPECT() *MockBitnamiV1alpha1InterfaceMockRecorder {
	return m.recorder
}

// RESTClient mocks base method.
func (m *MockBitnamiV1alpha1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockBitnamiV1alpha1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockBitnamiV1alpha1Interface)(nil).RESTClient))
}

// SealedSecrets mocks base method.
func (m *MockBitnamiV1alpha1Interface) SealedSecrets(namespace string) v1alpha10.SealedSecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealedSecrets", namespace)
	ret0, _ := ret[0].(v1alpha10.SealedSecretInterface)
	return ret0
}

// SealedSecrets indicates an expected call of SealedSecrets.
func (mr *MockBitnamiV1alpha1InterfaceMockRecorder) SealedSecrets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealedSecrets", reflect.TypeOf((*MockBitnamiV1alpha1Interface)(nil).SealedSecrets), namespace)
}

// MockSealedSecretInterface is a mock of SealedSecretInterface interface.
type MockSealedSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSealedSecretInterfaceMockRecorder
	isgomock struct{}
}

// MockSealedSecretInterfaceMockRecorder is the mock recorder for MockSealedSecretInterface.
type MockSealedSecretInterfaceMockRecorder struct {
	mock *MockSealedSecretInterface
}

// NewMockSealedSecretInterface creates a new mock instance.
func NewMockSealedSecretInterface(ctrl *gomock.Controller) *MockSealedSecretInterface {
	mock := &MockSealedSecretInterface{ctrl: ctrl}
	mock.recorder = &MockSealedSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSealedSecretInterface) EXPECT() *MockSealedSecretInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSealedSecretInterface) Create(ctx context.Context, sealedSecret *v1alpha1.SealedSecret, opts v1.CreateOptions) (*v1alpha1.SealedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sealedSecret, opts)
	ret0, _ := ret[0].(*v1alpha1.SealedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSealedSecretInterfaceMockRecorder) Create(ctx, sealedSecret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSealedSecretInterface)(nil).Create), ctx, sealedSecret, opts)
}

// Delete mocks base method.
func (m *MockSealedSecretInterface) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSealedSecretInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSealedSecretInterface)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockSealedSecretInterface) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSealedSecretInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSealedSecretInterface)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Get mocks base method.
func (m *MockSealedSecretInterface) Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.SealedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1alpha1.SealedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSealedSecretInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSealedSecretInterface)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockSealedSecretInterface) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.SealedSecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1alpha1.SealedSecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSealedSecretInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSealedSecretInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockSealedSecretInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (*v1alpha1.SealedSecret, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SealedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockSealedSecretInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockSealedSecretInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockSealedSecretInterface) Update(ctx context.Context, sealedSecret *v1alpha1.SealedSecret, opts v1.UpdateOptions) (*v1alpha1.SealedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sealedSecret, opts)
	ret0, _ := ret[0].(*v1alpha1.SealedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSealedSecretInterfaceMockRecorder) Update(ctx, sealedSecret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSealedSecretInterface)(nil).Update), ctx, sealedSecret, opts)
}

// UpdateStatus mocks base method.
func (m *MockSealedSecretInterface) UpdateStatus(ctx context.Context, sealedSecret *v1alpha1.SealedSecret, opts v1.UpdateOptions) (*v1alpha1.SealedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, sealedSecret, opts)
	ret0, _ := ret[0].(*v1alpha1.SealedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockSealedSecretInterfaceMockRecorder) UpdateStatus(ctx, sealedSecret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockSealedSecretInterface)(nil).UpdateStatus), ctx, sealedSecret, opts)
}

// Watch mocks base method.
func (m *MockSealedSecretInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockSealedSecretInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSealedSecretInterface)(nil).Watch), ctx, opts)
}
