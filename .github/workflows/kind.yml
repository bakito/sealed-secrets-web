name: end-2-end Helm Chart Tests

on:
  push:
    branches:
      - switch-to-sealed-secret-api

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Install jq
        uses: dcarbone/install-jq-action@v1.0.0
      - name: Install yq
        uses: dcarbone/install-yq-action@v1.0.0

      - name: Setup Registry Container
        run: |
          docker run -d --restart=always -p "127.0.0.1:5001:5000" --name kind-registry registry:2
      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          version: v0.14.0
          kubectl_version: v1.24.0
          config: testdata/e2e/kind/config.yaml
      - name: Setup Local Registry
        run: |
          # https://kind.sigs.k8s.io/docs/user/local-registry/
          docker network connect kind kind-registry
          kubectl apply -f testdata/e2e/kind/configmap-registry.yaml
          # image registry: localhost:5001/
      - name: Setup Ingress
        run: |
          # https://kind.sigs.k8s.io/docs/user/ingress/
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s

      - name: Build image
        run: |
          docker build -f Dockerfile -t localhost:5001/sealed-secrets-web:build .
          docker push  localhost:5001/sealed-secrets-web:build

      - name: Install sealed-secrets
        run: |
          helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets
          helm install sealed-secrets sealed-secrets/sealed-secrets \
            --namespace sealed-secrets \
            --create-namespace \
            --atomic
      - name: Install sealed-secrets-web with yaml format
        run: ./testdata/e2e/installSealedSecretsWebChart.sh yaml

      - name: Start port-forwarding for svc/sealed-secrets-web
        run: kubectl port-forward svc/sealed-secrets-web -n sealed-secrets-web 8080:80 &

      - name: Test 'encode should encode a yaml stringData secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh encode stringData.yaml data.yaml


      - name: Test 'encode should not re-encode a yaml data secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh encode data.yaml data.yaml

      - name: Test 'decode should decode a yaml data secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh decode data.yaml stringData.yaml

      - name: Test 'decode should not re-decode a yaml stringData secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh decode stringData.yaml stringData.yaml

      - name: Test 'seal yaml'
        working-directory: testdata/e2e
        run: |
          ./seal.sh stringData.json sealed.yaml
          ./verifySealedSecret.sh sealed.yaml

      - name: Install sealed-secrets-web with json format
        run: |
          pkill -f "port-forward svc/sealed-secrets-web"
          helm delete sealed-secrets-web --namespace sealed-secrets-web
          ./testdata/e2e/installSealedSecretsWebChart.sh json

      - name: Start port-forwarding for svc/sealed-secrets-web
        run: kubectl port-forward svc/sealed-secrets-web -n sealed-secrets-web 8080:80 &

      - name: Test 'encode should encode a json stringData secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh encode stringData.json data.json

      - name: Test 'encode should not re-encode a json data secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh encode data.json data.json

      - name: Test 'decode should decode a json data secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh decode data.json stringData.json

      - name: Test 'decode should not re-decode a json stringData secret'
        working-directory: testdata/e2e
        run: ./runCheck.sh decode stringData.json stringData.json

      - name: Test 'seal json'
        working-directory: testdata/e2e
        run: |
          ./seal.sh stringData.json sealed.json
          ./verifySealedSecret.sh sealed.json
